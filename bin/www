// #!/usr/bin/env node

// /**
//  * Module dependencies.
//  */

// var app = require('../app');
// var debug = require('debug')('back-mffe:server');
// // var http = require('http');

// // var http = require('http'); 
// // const server = http.createServer(app);
// const httpServer = require("../app").httpServer;
// /**
//  * Get port from environment and store in Express.
//  */

// var port = normalizePort(process.env.PORT || '5000');
//  app.set('port', port);

// /**
//  * Create HTTP server.
//  */

// //  var server = http.createServer(app);

// /**
//  * Listen on provided port, on all network interfaces.
//  */

// httpServer.listen(port, ()=>{
//   console.log("Connecter au port:",port);

// });
// httpServer.on('error', onError);
// httpServer.on('listening', onListening);

// /**
//  * Normalize a port into a number, string, or false.
//  */

// function normalizePort(val) {
//   var port = parseInt(val, 10);

//   if (isNaN(port)) {
//     // named pipe
//     return val;
//   }

//   if (port >= 0) {
//     // port number
//     return port;
//   }

//   return false;
// }

// /**
//  * Event listener for HTTP httpServer "error" event.
//  */

// function onError(error) {
//   if (error.syscall !== 'listen') {
//     throw error;
//   }

//   var bind = typeof port === 'string'
//     ? 'Pipe ' + port
//     : 'Port ' + port;

//   // handle specific listen errors with friendly messages
//   switch (error.code) {
//     case 'EACCES':
//       console.error(bind + ' requires elevated privileges');
//       process.exit(1);
//       break;
//     case 'EADDRINUSE':
//       console.error(bind + ' is already in use');
//       process.exit(1);
//       break;
//     default:
//       throw error;
//   }
// }

// /**
//  * Event listener for HTTP httpServer "listening" event.
//  */

// function onListening() {
//   var addr = httpServer.address();
//   var bind = typeof addr === 'string'
//     ? 'pipe ' + addr
//     : 'port ' + addr.port;
//   debug('Listening on ' + bind);
// }






const app = require("../app").app;
const httpServer = require("../app").httpServer;

var debug = require("debug")("example-app:server");
// var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || "5000");
app.set("port", port);

/**
 * Create HTTP server.
 */

// const server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

httpServer.listen(port, () => {
  console.log("app running on port " + port);
});
httpServer.on("error", onError);
httpServer.on("listening", onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = httpServer.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}